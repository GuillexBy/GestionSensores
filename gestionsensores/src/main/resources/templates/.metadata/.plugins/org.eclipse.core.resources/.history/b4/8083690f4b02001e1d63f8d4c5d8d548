package restaurantes.repositorio;

import static org.bson.codecs.configuration.CodecRegistries.fromProviders;
import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.bson.Document;
import org.bson.codecs.configuration.CodecRegistry;
import org.bson.codecs.pojo.PojoCodecProvider;
import org.bson.types.ObjectId;

import com.mongodb.ConnectionString;
import com.mongodb.MongoClientSettings;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import repositorio.EntidadNoEncontrada;
import repositorio.RepositorioException;
import repositorio.RepositorioString;
import restaurantes.modelo.Restaurante;
import utils.Utils;

public class RepositorioRestaurantes<T extends Identificable> implements RepositorioString<T> {
	//private HashMap<String, T> mapa = new HashMap<>();
	private int id = 1;
	
	
	// MONGO
	// Conexiones a mongo
	
	String connectionString = System.getenv("URI_MONGODB"); 
	    CodecRegistry pojoCodecRegistry = fromProviders(PojoCodecProvider.builder().automatic(true).build());
	    CodecRegistry codecRegistry = fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), pojoCodecRegistry);
    
	
	
	
	MongoClientSettings settings = MongoClientSettings.builder()
            .applyConnectionString(new ConnectionString(connectionString))
            .build();
	
    MongoClient mongoClient = MongoClients.create(settings);
	MongoDatabase database = mongoClient.getDatabase("Proyecto-ARSO");
	
	//database.createCollection("restaurantes");
	
	MongoCollection<Restaurante> restaurantes = database.getCollection("Restaurantes", Restaurante.class).withCodecRegistry(codecRegistry);
	

	public String add(T entity) throws RepositorioException { // OK
		String id_string = Integer.toString(id);
		entity.setId(new ObjectId().toString());
		id+=1;
		//this.mapa.put(id_string, entity); // EN memoria
		
		restaurantes.insertOne((Restaurante)entity); // EN Mongo
		return entity.getId();
	}

	public void update(T entity) throws RepositorioException, EntidadNoEncontrada { // OK
		
		Restaurante r = (Restaurante) entity;
		Document filter = new Document("_id", r.getId());
		if(restaurantes.find(filter).first() == null) {
			throw new EntidadNoEncontrada(entity.getId() + "no est√°");
		}
		restaurantes.findOneAndReplace(filter, r);
		//this.mapa.put((entity.getId()), entity);
	}

	public void delete(T entity) throws RepositorioException, EntidadNoEncontrada {
		Restaurante r = (Restaurante) entity;
		//this.mapa.remove((entity.getId()));
		restaurantes.deleteOne(new Document("_id", r.getId()));
	}

	@SuppressWarnings("unchecked")
	public T getById(String id) throws RepositorioException, EntidadNoEncontrada {
		Document filter = new Document("_id", id);
		Restaurante r = restaurantes.find(filter).first();
		return (T) r;
	}

	@SuppressWarnings("unchecked")
	public List<T> getAll() throws RepositorioException {
		//
		ArrayList<Restaurante> lista = new ArrayList<>();
		FindIterable<Restaurante> iterable = restaurantes.find();
		Iterator<Restaurante> iterator = iterable.iterator();
		
		while(iterator.hasNext()) {
			Restaurante r = iterator.next();
			lista.add(r);
		}
		return (List<T>) lista;
	}

	public List<String> getIds() throws RepositorioException {
		//return new ArrayList<String>(this.mapa.keySet());
		return null;
	}
}
